{"version":3,"sources":["Components/Card/Card.js","Pages/Home/Home.js","Pages/About/About.js","Pages/Projects/Projects.js","Pages/Resume/Resume.js","Pages/Contact/Contact.js","Components/NavigationBar/NavigationBar.js","Components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","href","rel","text","Home","id","About","Projects","Resume","Contact","Styles","styled","div","NavigationBar","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Item","Link","to","Layout","Container","children","App","Fragment","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAgBeA,G,YAbF,SAACC,GACZ,OACE,yBAAKC,UAAU,QACb,8BACE,0BAAMC,KAAK,kEAAkEC,IAAI,gBAEjF,4BACGH,EAAMI,SCuBFC,EA7BF,SAACL,GAEZ,OACE,yBAAKC,UAAU,QAEb,yBAAKK,GAAG,SACN,kBAAC,EAAD,CAAMF,KAAM,8BAGd,yBAAKE,GAAG,SACN,kBAAC,EAAD,CAAMF,KAAM,cAGd,yBAAKE,GAAG,UACN,kBAAC,EAAD,CAAMF,KAAM,YAGd,yBAAKE,GAAG,YACN,kBAAC,EAAD,CAAMF,KAAM,cAGd,yBAAKE,GAAG,SACN,kBAAC,EAAD,CAAMF,KAAM,eChBLG,EARD,WACV,OACI,6BACI,0CCKGC,EARE,WACb,OACI,6BACI,+CCIGC,EAPA,WACX,OAAQ,6BACJ,wCCMOC,EARC,WACZ,OACI,6BACI,8C,iQCAZ,IAAMC,E,MAASC,EAAOC,IAAV,KAcCC,EAAgB,WAC3B,OACE,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcf,KAAK,KAAnB,aACA,kBAACa,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBd,GAAG,oBAClB,kBAACe,EAAA,EAAD,CAAKpB,UAAU,WACb,kBAACoB,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,eAGJ,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,cAGJ,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,aAAT,cAGJ,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,YAGJ,kBAACH,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,kB,QC9CHC,EAAS,SAACzB,GACnB,OACI,kBAAC0B,EAAA,EAAD,KACK1B,EAAM2B,WC0BJC,E,iLAnBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,SAASC,UAAWzB,IAChC,kBAAC,IAAD,CAAOwB,KAAK,YAAYC,UAAWxB,IACnC,kBAAC,IAAD,CAAOuB,KAAK,WAAWC,UAAWtB,IAClC,kBAAC,IAAD,CAAOqB,KAAK,UAAUC,UAAWvB,Y,GAZ7BwB,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56ce6182.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <head>\n        <link href=\"https://fonts.googleapis.com/css?family=Bree+Serif&display=swap\" rel=\"stylesheet\"/>\n      </head>\n        <h1>\n          {props.text}\n        </h1>\n    </div>\n      );\n    }\n    \nexport default Card","import React from 'react';\nimport './Home.css';\nimport Card from \"../../Components/Card/Card\";\n\nconst Home = (props) => {\n\n  return (\n    <div className=\"Home\">\n    \n      <div id=\"Title\">\n        <Card text={\"Matthew Morgan Portfolio\"} />\n      </div>\n\n      <div id=\"About\">\n        <Card text={\"About Me\"} />\n      </div>\n\n      <div id=\"Resume\">\n        <Card text={\"Resume\"} />\n      </div>\n\n      <div id=\"Projects\">\n        <Card text={\"Projects\"} />\n      </div>\n\n      <div id=\"Other\">\n        <Card text={\"Contact\"} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default Home","import React from 'react';\n\nconst About = () => {\n    return(\n        <div>\n            <h1>ABOUT ME</h1>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\n\nconst Projects = () => {\n    return(\n        <div>\n            <h1>PAST PROJECTS</h1>\n        </div>\n    );\n}\n\nexport default Projects;","import React from 'react';\n\nconst Resume = () => {\n    return (<div>\n        <h1>RESUME</h1>\n    </div>);\n\n}\n\nexport default Resume;","import React from 'react';\n\nconst Contact = () => {\n    return (\n        <div>\n            <h1>CONTACT PAGE</h1>\n        </div>\n    );\n}\n\nexport default Contact;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n  .navbar {\n    background-color: #222;\n  }\n\n  a, .navbar-brand, .navbar-nav .nav-link {\n    color: #bbb;\n\n    &:hover {\n      color: white;\n    }\n  }\n`;\n\nexport const NavigationBar = () => {\n  return (\n    <Styles>\n      <Navbar expand=\"lg\">\n        <Navbar.Brand href=\"/\">Something</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Item>\n              <Nav.Link>\n                <Link to=\"/\">Home Page</Link>\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link>\n                <Link to=\"/about\">About Me</Link>\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link>\n                <Link to=\"/projects\">Projects</Link>\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link>\n                <Link to=\"/resume\">Resume</Link>\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link>\n                <Link to=\"/contact\">Contact</Link>\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Styles>\n  );\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nexport const Layout = (props) => {\n    return (\n        <Container>\n            {props.children}\n        </Container>\n    );\n}","import React from 'react';\n// import './App.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from \"./Pages/Home/Home\";\nimport About from \"./Pages/About/About\";\nimport Projects from \"./Pages/Projects/Projects\";\nimport Resume from \"./Pages/Resume/Resume\";\nimport Contact from \"./Pages/Contact/Contact\";\nimport { NavigationBar } from \"./Components/NavigationBar/NavigationBar\"\nimport { Layout } from './Components/Layout/Layout';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <NavigationBar />\n          <Layout>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/projects\" component={Projects} />\n              <Route path=\"/contact\" component={Contact} />\n              <Route path=\"/resume\" component={Resume} />\n            </Switch>\n          </Layout>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}